x-deploy-default: &x-deploy-default
  update_config:
    parallelism: 1
    delay: 30s
    order: stop-first
    failure_action: rollback
  rollback_config:
    parallelism: 1
    delay: 30s
  restart_policy:
    condition: on-failure
    delay: 30s
    max_attempts: 3
    window: 120s

x-logging-default: &x-logging-default
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

networks:
  dockerswarm_monitoring:

volumes:
  grafana:
  prometheus:
  alertmanager:

configs:
  # Grafana
  grafana-datasource:
    file: services/grafana/provisioning/datasources/promstack.yaml
  # Prometheus
  prometheus-config:
    file: services/prometheus/prometheus.yml
  # Scrape configs
  scrape-configs-docker:
    file: services/prometheus/scrape_configs/docker.yml
  scrape-configs-dockerswarm:
    file: services/prometheus/scrape_configs/dockerswarm.yml
  # Rules
  alerting-rules-node:
    file: services/prometheus/rules/node.yml
  alerting-rules-service:
    file: services/prometheus/rules/service.yml
  alerting-rules-task:
    file: services/prometheus/rules/task.yml
  
  # Alertmanager
  alertmanager.yml:
    file: services/alertmanager/alertmanager.yml

  # Node Exporter
  node-meta.prom:
    template_driver: golang
    file: services/node-exporter/node-meta.prom

  # Promtail
  promtail.yml:
    template_driver: golang
    file: services/promtail/promtail.yml

services:
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:?Please set GRAFANA_VERSION environment variable}
    environment:
      - GF_LOG_LEVEL=info
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_CHECK_FOR_UPDATES=false
      - GF_SERVER_DOMAIN={{.Node.Hostname}}
    networks:
      - dockerswarm_monitoring
    ports:
      - 3000:3000
    configs:
      - source: grafana-datasource
        target: /etc/grafana/provisioning/datasources/promstack.yaml
    volumes:
      - grafana:/var/lib/grafana
    deploy: 
      <<: *x-deploy-default
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        io.prometheus.enable: "true"
    logging: *x-logging-default

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:?Please set PROMETHEUS_VERSION environment variable}
    hostname: prometheus-{{.Task.Slot}}
    user: root
    command:
      - "--log.level=info"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.size=10GB"
      - "--storage.tsdb.retention.time=10d"
    networks:
      - dockerswarm_monitoring
    ports:
      - 9090:9090
    volumes:
      - prometheus:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
      # Scrape configs
      - source: scrape-configs-docker
        target: /etc/prometheus/scrape_configs/docker.yml
      - source: scrape-configs-dockerswarm
        target: /etc/prometheus/scrape_configs/dockerswarm.yml
      # Rules
      - source: alerting-rules-node
        target: /etc/prometheus/rules/node.yml
      - source: alerting-rules-service
        target: /etc/prometheus/rules/service.yml
      - source: alerting-rules-task
        target: /etc/prometheus/rules/task.yml
    deploy: 
      <<: *x-deploy-default
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    logging: *x-logging-default

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION:?Please set ALERTMANAGER_VERSION environment variable}
    hostname: alertmanager-{{.Task.Slot}}
    command:
      - "--log.level=info"
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    networks:
      - dockerswarm_monitoring
    ports:
      - 9093:9093
    volumes:
      - alertmanager:/alertmanager
    configs:
      - source: alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
    deploy: 
      <<: *x-deploy-default
      replicas: 1
      labels:
        io.prometheus.enable: "true"
      placement:
        constraints:
          - node.role == manager
    logging: *x-logging-default

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:?Please set NODE_EXPORTER_VERSION environment variable}
    command:
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--path.rootfs=/rootfs'
      - '--no-collector.ipvs'
    environment:
      NODE_ID: "${NODE_ID:-{{.Node.ID}}}"
      NODE_NAME: "${NODE_NAME:-{{.Node.Hostname}}}"
    networks:
      - dockerswarm_monitoring
    ports:
      - 9100:9100
    volumes:
      - /:/rootfs:ro,rslave
    configs:
      - source: node-meta.prom
        target: /etc/node-exporter/node-meta.prom
    deploy: 
      <<: *x-deploy-default
      mode: global
      labels:
        io.prometheus.enable: "true"
    logging: *x-logging-default

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:?Please set CADVISOR_VERSION environment variable}
    command: -logtostderr -docker_only
    networks:
      - dockerswarm_monitoring
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/run:/var/run:ro
      - /dev/disk/:/dev/disk:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # For Darwin comment out the following line
      - /dev/kmsg:/dev/kmsg
      - /etc/hostname:/etc/hostname:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    deploy: 
      <<: *x-deploy-default
      mode: global
      labels:
        io.prometheus.enable: "true"
    logging: *x-logging-default

  promtail:
    image:  grafana/promtail:${PROMTAIL_VERSION:-latest}
    command: -config.file=/etc/promtail/config.yml
    networks:
      - dockerswarm_monitoring
    ports:
      - ${PROMTAIL_PORT:-9080}:9080
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: promtail.yml
        target: /etc/promtail/config.yml
    deploy: 
      <<: *x-deploy-default
      mode: global
      labels:
        io.prometheus.enable: "true"
    logging: *x-logging-default
